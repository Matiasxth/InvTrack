# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_kulXuS2JPiJYjBXTecxiolLQ5laq_Cd
"""

from flask import Flask, request, jsonify, render_template
from sqlalchemy import create_engine, Table, Column, Integer, String, MetaData
from sqlalchemy.exc import IntegrityError

app = Flask(__name__)

# Configuración de la base de datos SQLite
DATABASE_URL = "sqlite:///database.db"
engine = create_engine(DATABASE_URL)
metadata = MetaData()

# Definición de la tabla de inventario
inventory_table = Table(
    'inventory', metadata,
    Column('id', Integer, primary_key=True, autoincrement=True),
    Column('nombre', String, nullable=False),
    Column('cantidad', Integer, nullable=False),
    Column('categoria', String, nullable=True),
    Column('ubicacion', String, nullable=True),
    Column('observaciones', String, nullable=True),
)

# Crear la tabla si no existe
metadata.create_all(engine)

# Ruta principal para mostrar la página web
@app.route("/")
def index():
    return render_template("index.html")

# API: Leer el inventario
@app.route("/api/inventory", methods=["GET"])
def get_inventory():
    with engine.connect() as conn:
        result = conn.execute(inventory_table.select())
        items = [dict(row) for row in result.fetchall()]
    return jsonify(items)

# API: Agregar un nuevo ítem
@app.route("/api/inventory", methods=["POST"])
def add_item():
    data = request.json
    try:
        with engine.connect() as conn:
            conn.execute(inventory_table.insert().values(
                nombre=data["nombre"],
                cantidad=data["cantidad"],
                categoria=data.get("categoria"),
                ubicacion=data.get("ubicacion"),
                observaciones=data.get("observaciones"),
            ))
        return jsonify({"message": "Ítem agregado correctamente."}), 201
    except IntegrityError:
        return jsonify({"error": "Error al agregar el ítem."}), 400

# API: Eliminar un ítem
@app.route("/api/inventory/<int:item_id>", methods=["DELETE"])
def delete_item(item_id):
    with engine.connect() as conn:
        result = conn.execute(inventory_table.delete().where(inventory_table.c.id == item_id))
    if result.rowcount > 0:
        return jsonify({"message": "Ítem eliminado correctamente."})
    return jsonify({"error": "Ítem no encontrado."}), 404

if __name__ == "__main__":
    app.run(debug=True)